################################################################################
# Project      : AuShadha
# Description  : Medical History Views
# Author       : Dr.Easwar T.R 
# Date         : 16-09-2013
# License      : GNU-GPL Version 3,Please see AuShadha/LICENSE.txt for details
################################################################################

"""
  Module which sets up the UI on load
"""

# General Module imports
from datetime import datetime, date, time
import importlib
import json

# General Django Imports
from django.shortcuts import render_to_response
from django.http import Http404, HttpResponse, HttpResponseRedirect
from django.template import RequestContext
from django.core.urlresolvers import reverse
from django.contrib.auth.decorators import login_required

#AuShadha imports
from AuShadha import settings
from AuShadha.apps.ui.ui import ui as UI


def serialise_ui(UI):
    """ Generates the dictionary dump of the UI instance for serialization later """

    data = []
    registry = UI.registry
    for k,v in registry.items():
      dict_to_append = {'role': k, 'class': v.__name__ if type(v) is str else unicode(v)}
      data.append( dict_to_append )
    return data



@login_required
def installed_apps(request):

  """ 

    Generates the Installed App list from settings.ENABLED_APPS 

    Ideally this should be labelled "enabled_apps" that may include only a 
    sub set of apps Installed. 

    The enabled_apps can then be registered with user interface
    The enabled_apps is generated by the UI instance which is imported. 

    Ideally this function will only pass the serialized value, at the most 
    filtering 'django' and 'aushadha' packages

    Once the UI.registry can be improved to take in arbitraty class instances, 
    the ui_sections hack which has been used in each module's __init__.py can 
    be removed. 

  """ 

  user = request.user

  if request.method == "GET":
    success = True
    installed_apps = []
    apps = settings.INSTALLED_APPS

    for app in apps:
      main_module = app.split('.')[0]
      app_name = app.split('.')[-1]

      #Hack to avoid core modules. This way the UI atleast starts with core modules
      #as dependencies
      if  main_module not in ['django','AuShadha'] or app_name in ['search']:
        x = importlib.import_module(app)
        label = getattr(x,'MODULE_LABEL',None)
        ui_sections = getattr(x,'ui_sections',None)
        if ui_sections: 
          url = ui_sections['widgets']['tree']
        else:
          url = None

        if label:
          apps = {}
          apps['app'] = label
          apps['ui_sections'] = ui_sections
          apps['url'] = url
          installed_apps.append(apps)

    data = {'success':success,
            'error_message':"Returning Installed Apps",
            'installed_apps':installed_apps,
            'UI': serialise_ui(UI)
            }
    print( dir(json))
    jsondata = json.dumps(data)
    return HttpResponse(jsondata, content_type='application/json')

  else:
    raise Http404("Bad Request Method")
