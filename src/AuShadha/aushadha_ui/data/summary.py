#######################################################################################
# PROJECT      : AuShadha
# Description  : ModelInstanceSummary class
# Author       : Dr. Easwar T R
# Date         : 16-09-2013
# Licence      : GNU GPL V3. Please see AuShadha/LICENSE.txt
#######################################################################################


"""

 | Defines the ModelInstanceSummary class
 | Useful for generation of data presentation to user as a Summary.  

 | For eg: >
           > A Patient may have medications, histories, admission, opd visits etc...

           > The Instance of ModelInstanceSummary when called returns the related objects.

           > This also builds on the related_object_list generated by the ModelInstanceJson instance

"""

# Stdlib imports
import importlib
import re

# Django imports
import json

# AuShadha module imports
from .json import ModelInstanceJson




class ModelInstanceSummary(object):
  
  """
   Returns a summary of the model instance along with its related models
   So can be implemented this way

    def main():
      from patient.models import PatientDetail
      from demographics.contact.models import Contact
      p = PatientDetail.objects.get(pk = 1)
      c = Contact(address_type = 'home',address="sds")
      c.patient_detail = p
      c.save()
      d = ModelInstanceSummary(p)
      return d()

    main() --> Returns the Summary
  """


  def __init__(self,instance,template=None):

    self.instance = instance
    self.module_path_map = []

    # This would be ideal as later templates can be used with variable substitution 
    # Later this can have relative module paths with file that calls it and set a path for the summary template
    # This template can be filled with variable substitution and returned
    # Right now this is not used. 
    # Calling the Instance will return the Summary object
    self.summary_template = '%s/summary.html' %(self.instance.__model_label__) 

    # Creates the ModelInstanceJson Instance
    j = ModelInstanceJson(self.instance)
    self.related_model_paths = j.related_object_list

    # Build a basic Dictionary for module path and field names
    # This inturn calls the _extend_module_path_map() method 
    self.build_module_path_map()

    # Sets and builds the self.variable
    # self.variable is returned as the summary object when ModelInstanceSummary is called 
    self.build_variable() 


  def __call__(self):
    ''' Returns the self.variable which would be the summary '''
    return self.variable


  def __unicode__(self):
    ''' Returns the self.variable from __call__(). This is useful in templates '''
    return unicode( self.__call__() )


  def get_all_related_objects(self):
    ''' Retrieves all related objects to a model'''
    return [
      f for f in self.instance._meta.get_fields()
      if (f.one_to_many or f.one_to_one)
      and f.auto_created and not f.concrete 
      ]

  def build_module_path_map(self):
      ''' Creates a dictionary with module_path and field_name which can be used for imports '''

      for x in self.get_all_related_objects():

        d = { 'module_path' : [x.model.__module__, x.model.__name__], 
             'field_name' : x.field.name 
             }
        self.module_path_map.append(d)

      self._extend_module_path_map()


  def _extend_module_path_map(self):
    ''' Extends the module path map with Related object queries '''

    for module in self.module_path_map:

        try:
          m = importlib.import_module(module['module_path'][0])
          l = re.findall('[A-Z][^A-Z]*',module['module_path'][1])
          label = ( '_'.join(l) ).lower()

          cl = getattr(m,module['module_path'][1])
          d = {module['field_name'] : self.instance}
          rel_objs = cl.objects.filter(**d)

          module['rel_objs']= {}
          module['rel_objs']['model_label'] = label
          module['rel_objs']['queryset'] = rel_objs

        except(ImportError):
          raise Exception("ImportError")

  def build_variable(self):
    ''' Sets the self.variable Dictionary'''

    l = re.findall('[A-Z][^A-Z]*',self.instance.__class__.__name__)
    label = ( '_'.join(l) ).lower() + "_obj"
    self.variable = {label: self.instance}

    for item in self.module_path_map:
      rel_objs = item['rel_objs']
      model_label  = rel_objs['model_label']
      queryset_name = "%s_obj" %(model_label)
      queryset = rel_objs['queryset']
      self.variable[queryset_name] = queryset
