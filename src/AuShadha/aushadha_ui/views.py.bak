################################################################################
# Project     : AuShadha
# Description : Views for Initial UI Loading
# Author      : Dr.Easwar T.R , All Rights reserved with Dr.Easwar T.R.
# Date        : 20-12-2016
################################################################################

"""
 Views to deal with rendering of the UI 
 the AuShadha/ui/home path ends at home()
 
 The home() sets the variable to be returned. 
 Finds out the INSTALLED_APPS and returns that as JSON
 
 The main UI pane itself is generated at ./dijit_widgets/pane.py

"""
# General Module imports-----------------------------------
from datetime import datetime, date, time
import importlib
import json

# General Django Imports----------------------------------
from django.shortcuts import render_to_response
from django.shortcuts import render
from django.http import Http404, HttpResponse, HttpResponseRedirect
from django.template import RequestContext
#from django.core.context_processors import csrf
from django.contrib.auth.models import User
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.cache import never_cache
from django.views.decorators.csrf import csrf_protect
from django.views.decorators.debug import sensitive_post_parameters
from django.core import serializers
##from django.core.serializers import json
from django.core.serializers.json import DjangoJSONEncoder
from django.core.urlresolvers import reverse
from django.contrib.auth.decorators import login_required


# Application Specific Model Imports-----------------------
import AuShadha.settings as settings
from AuShadha.settings import APP_ROOT_URL
from AuShadha.core.serializers.data_grid import generate_json_for_datagrid
from AuShadha.core.views.dijit_tree import DijitTreeNode, DijitTree
from AuShadha.utilities.forms import aumodelformerrorformatter_factory

#AuShadha imports
from AuShadha import settings
from aushadha_ui.ui import ui as UI
from clinic.models import Clinic



# Create your views here.


#def home(request):
#    "renders the home page"
#    return render(request,'home.html')

# Views start here -----------------------------------------


@login_required
def home(request):

  ''' 
      Handles request to render the home page at ui/base.html 
      Finds out the INSTALLED_APPS and generates label attribute
      based on the MODULE_LABEL attribute on the app set in __init__.py

      If MODULE_LABEL is not set it is set to None.
      The INSTALLED_APPS is iterated over and collected.
      Template variable is generated and ui/base.html is rendered and returned

      installed_apps variable generated by this is not very important as
      that implementation is not done by views.installed_apps method. 

      The main duty of this function is to verify the user credential and render the ui/base.html
      template. 
  '''
  user = request.user

  if request.method == "GET":
    installed_apps =[]
    apps = settings.INSTALLED_APPS

    for app in apps:
      #Hack to avoid core modules. This way the UI atleast starts with core modules
      #as dependencies
      if not app.split('.')[0] == 'AuShadha':
        x = importlib.import_module(app)
        label = getattr(x,'MODULE_LABEL',None)
        if label:
          installed_apps.append(label)
    installed_apps = json.dumps(installed_apps)
    variable = RequestContext(request, {'user':user,'installed_apps':installed_apps})
    return render_to_response('ui/base.html',variable)

  else:
    raise Http404("Bad Request Method")


@login_required
def get_reference_apps(request):
    if request.method == 'GET':
        from .ui import ui as UI
        apps = UI.get_module('ReferenceApp')
        data = {'success': True,'apps': [app._meta.app_label.replace('_',' ').upper() for app in apps]}
        jsondata = json.dumps(data)
        app_objs = [{'app_url': app.get_pane_url(),
                     'app_name':app._meta.app_label.replace('_',' ').upper()
                    } 
                    for app in apps]
        variable = RequestContext(request,
                                   {'user': request.user,
                                    #'apps': [app._meta.app_label.replace('_',' ').upper() for app in apps],
                                    'app_objs': app_objs
                                   })

        return render_to_response('header_pane/reference_apps.html', variable)
        #print("Reference Apps are: ")
        #print(apps)
        #return HttpResponse(jsondata,content_type='application/json')
    else:
        raise Http404("Bad Request Method")

def serialise_ui(UI):
    """ Generates the dictionary dump of the UI instance for serialization later """

    data = []
    registry = UI.registry
    for k,v in registry.items():
      dict_to_append = {'role': k, 'class': v.__name__ if type(v) is str else unicode(v)}
      data.append( dict_to_append )
    return data



@login_required
def installed_apps(request):

  """ 

    Generates the Installed App list from settings.ENABLED_APPS 

    Ideally this should be labelled "enabled_apps" that may include only a 
    sub set of apps Installed. 

    The enabled_apps can then be registered with user interface
    The enabled_apps is generated by the UI instance which is imported. 

    Ideally this function will only pass the serialized value, at the most 
    filtering 'django' and 'aushadha' packages

    Once the UI.registry can be improved to take in arbitraty class instances, 
    the ui_sections hack which has been used in each module's __init__.py can 
    be removed. 

  """ 

  user = request.user

  if request.method == "GET":
    success = True
    installed_apps = []
    apps = settings.INSTALLED_APPS

    for app in apps:
      main_module = app.split('.')[0]
      app_name = app.split('.')[-1]

      #Hack to avoid core modules. This way the UI atleast starts with core modules
      #as dependencies
      if  main_module not in ['django','AuShadha'] or app_name in ['search']:
        x = importlib.import_module(app)
        label = getattr(x,'MODULE_LABEL',None)
        ui_sections = getattr(x,'ui_sections',None)
        if ui_sections: 
          url = ui_sections['widgets']['tree']
        else:
          url = None

        if label:
          apps = {}
          apps['app'] = label
          apps['ui_sections'] = ui_sections
          apps['url'] = url
          installed_apps.append(apps)

    data = {'success':success,
            'error_message':"Returning Installed Apps",
            'installed_apps':installed_apps,
            'UI': serialise_ui(UI)
            }
    print( dir(json))
    jsondata = json.dumps(data)
    return HttpResponse(jsondata, content_type='application/json')

  else:
    raise Http404("Bad Request Method")
